// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_roles
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-28, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu`, CPU: `AMD Ryzen 9 4900HS with Radeon Graphics`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/fs-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_roles
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/roles/src/weights.rs
// --template
// assets/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_roles.
pub trait WeightInfo {
	fn investor(b: u32, ) -> Weight;
	fn approval(b: u32, ) -> Weight;
	fn rejection(b: u32, ) -> Weight;
	fn set_admin(b: u32, ) -> Weight;
}

/// Weights for pallet_roles using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: RoleModule HouseSellerLog (r:1 w:0)
	// Storage: RoleModule InvestorLog (r:1 w:1)
	// Storage: RoleModule ServicerLog (r:1 w:0)
	// Storage: RoleModule TenantLog (r:1 w:0)
	// Storage: RoleModule TotalMembers (r:1 w:1)
	// Storage: RoleModule AccountsRolesLog (r:0 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn investor(_b: u32, ) -> Weight {
		Weight::from_ref_time(48_698_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Sudo Key (r:1 w:0)
	// Storage: RoleModule TotalMembers (r:1 w:1)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	// Storage: RoleModule HouseSellerLog (r:0 w:1)
	// Storage: RoleModule AccountsRolesLog (r:0 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn approval(_b: u32, ) -> Weight {
		Weight::from_ref_time(60_522_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Sudo Key (r:1 w:0)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn rejection(_b: u32, ) -> Weight {
		Weight::from_ref_time(53_834_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sudo Key (r:1 w:1)
	// Storage: RoleModule ServicerLog (r:1 w:2)
	// Storage: RoleModule AccountsRolesLog (r:1 w:1)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn set_admin(b: u32, ) -> Weight {
		Weight::from_ref_time(50_748_000 as u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time((29_000 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: RoleModule HouseSellerLog (r:1 w:0)
	// Storage: RoleModule InvestorLog (r:1 w:1)
	// Storage: RoleModule ServicerLog (r:1 w:0)
	// Storage: RoleModule TenantLog (r:1 w:0)
	// Storage: RoleModule TotalMembers (r:1 w:1)
	// Storage: RoleModule AccountsRolesLog (r:0 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn investor(_b: u32, ) -> Weight {
		Weight::from_ref_time(48_698_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Sudo Key (r:1 w:0)
	// Storage: RoleModule TotalMembers (r:1 w:1)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	// Storage: RoleModule HouseSellerLog (r:0 w:1)
	// Storage: RoleModule AccountsRolesLog (r:0 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn approval(_b: u32, ) -> Weight {
		Weight::from_ref_time(60_522_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Sudo Key (r:1 w:0)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn rejection(_b: u32, ) -> Weight {
		Weight::from_ref_time(53_834_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sudo Key (r:1 w:1)
	// Storage: RoleModule ServicerLog (r:1 w:2)
	// Storage: RoleModule AccountsRolesLog (r:1 w:1)
	// Storage: RoleModule RoleApprovalList (r:1 w:1)
	/// The range of component `b` is `[0, 200]`.
	fn set_admin(b: u32, ) -> Weight {
		Weight::from_ref_time(50_748_000 as u64)
			// Standard Error: 5_000
			.saturating_add(Weight::from_ref_time((29_000 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
}