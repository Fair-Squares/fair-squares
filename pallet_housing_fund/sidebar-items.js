window.SIDEBAR_ITEMS = {"attr":[["transactional","Execute the annotated function in a new storage transaction."]],"constant":[["MAX_MODULE_ERROR_ENCODED_SIZE","The number of bytes of the module-specific `error` field defined in [`ModuleError`]. In FRAME, this is the maximum encoded size of a pallet error type."]],"derive":[["CloneNoBound","Derive [`Clone`] but do not bound any generic. Docs are at `frame_support::CloneNoBound`."],["DebugNoBound","Derive [`Debug`] but do not bound any generics. Docs are at `frame_support::DebugNoBound`."],["Decode","Derive `parity_scale_codec::Decode` and for struct and enum."],["Encode","Derive `parity_scale_codec::Encode` and `parity_scale_codec::EncodeLike` for struct and enum."],["EqNoBound","derive Eq but do no bound any generic. Docs are at `frame_support::EqNoBound`."],["MaxEncodedLen","Derive `parity_scale_codec::MaxEncodedLen` for struct and enum."],["PartialEqNoBound","Derive [`PartialEq`] but do not bound any generic. Docs are at `frame_support::PartialEqNoBound`."],["RuntimeDebug",""],["RuntimeDebugNoBound","Derive [`Debug`], if `std` is enabled it uses `frame_support::DebugNoBound`, if `std` is not enabled it just returns `\"<stripped>\"`. This behaviour is useful to prevent bloating the runtime WASM blob from unneeded code."],["TypeInfo",""]],"enum":[["DispatchClass","A generalized group of dispatch types."],["DispatchError","Reason why a dispatch call failed."],["ExistenceRequirement","Simple boolean for whether an account needs to be kept in existence."],["InvalidTransaction","An invalid transaction validity."],["Pays","Explicit enum to denote if a transaction pays fee or not."],["TransactionSource","The source of the transaction."],["TransactionValidityError","Errors that can occur while checking the validity of a transaction."],["UnknownTransaction","An unknown transaction validity."],["WithdrawalReason",""]],"fn":[["ensure_none","Ensure that the origin `o` represents an unsigned extrinsic. Returns `Ok` or an `Err` otherwise."],["ensure_root","Ensure that the origin `o` represents the root. Returns `Ok` or an `Err` otherwise."],["ensure_signed","Ensure that the origin `o` represents a signed extrinsic (i.e. transaction). Returns `Ok` with the account that signed the extrinsic or an `Err` otherwise."],["ensure_signed_or_root","Ensure that the origin `o` represents either a signed extrinsic (i.e. transaction) or the root. Returns `Ok` with the account that signed the extrinsic, `None` if it was root,  or an `Err` otherwise."]],"macro":[["ensure","Evaluate `$x:expr` and if not true return `Err($y:expr)`."]],"mod":[["pallet","The module that hosts all the FRAME types needed to add this pallet to a runtime."],["storage","Stuff to do with the runtime’s storage."],["weights","Autogenerated weights for pallet_housing_fund"]],"struct":[["Blake2_128","Hash storage keys with blake2 128"],["Blake2_128Concat","Hash storage keys with `concat(blake2_128(key), key)`"],["Blake2_256","Hash storage keys with blake2 256"],["BoundedVec","A bounded vector."],["ConstU32","Const getter for a basic type."],["Contribution",""],["ContributionLog",""],["ContributionShare",""],["CountedStorageMap","A wrapper around a `StorageMap` and a `StorageValue<Value=u32>` to keep track of how many items are in a map, without needing to iterate all the values."],["FundInfo",""],["FundOperation",""],["GetDefault","Implement Get by returning Default for any type that implements Default."],["Identity","Store the key directly."],["InherentData","Inherent data to include in a block."],["NMapKey","A type used exclusively by storage maps as their key type."],["OptionQuery","Implement QueryKindTrait with query being `Option<Value>`"],["PalletId","A pallet identifier. These are per pallet and should be stored in a registry somewhere."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["StorageDoubleMap","A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow to iterate and remove value associated to first key."],["StorageMap","A type that allow to store value for given key. Allowing to insert/remove/iterate on values."],["StorageNMap","A type that allow to store values for an arbitrary number of keys in the form of `(Key<Hasher1, key1>, Key<Hasher2, key2>, ..., Key<HasherN, keyN>)`."],["StorageValue","A type that allow to store a value."],["StorageVersion","The storage version of a pallet."],["Twox128","Hash storage keys with twox 128"],["Twox256","Hash storage keys with twox 256"],["Twox64Concat","Hash storage keys with `concat(twox64(key), key)`"],["ValidTransaction","Information concerning a valid transaction."],["ValueQuery","Implement QueryKindTrait with query being `Value`"],["Vec","A contiguous growable array type, written as `Vec<T>`, short for ‘vector’."],["WithdrawReasons","Reasons for moving funds out of an account."]],"trait":[["AccountIdConversion","This type can be converted into and possibly from an AccountId (which itself is generic)."],["Currency","Abstraction over a fungible assets system."],["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["EnsureOrigin","Some sort of check on the origin is performed by this object."],["GenesisBuild","A trait to define the build function of a genesis config, T and I are placeholder for pallet trait and pallet instance."],["Get","A trait for querying a single value from a type."],["GetStorageVersion","Provides information about the storage version of a pallet."],["Hooks","The pallet hooks trait. Implementing this lets you express some logic to execute."],["IsType","Trait to be used when types are exactly same."],["MaxEncodedLen","Items implementing `MaxEncodedLen` have a statically known maximum encoded size."],["MaybeSerializeDeserialize","A type that implements Serialize, DeserializeOwned and Debug when in std environment."],["Member","A type that can be used in runtime structures."],["PalletInfoAccess","Provides information about the pallet itself and its setup in the runtime."],["Parameter","A type that can be used as a parameter in a dispatchable function."],["ProvideInherent","A pallet that provides or verifies an inherent extrinsic will implement this trait."],["ReservableCurrency","A currency where funds can be reserved from the user."],["StorageInfoTrait","A trait to give information about storage."],["TypeInfo","Implementors return their meta type information."],["TypedGet","A trait for querying a single value from a type defined in the trait."],["ValidateUnsigned","Something that can validate unsigned extrinsics for the transaction pool."],["Zero","Defines an additive identity element for `Self`."]],"type":[["AccountIdOf",""],["BalanceOf",""],["BlockNumberFor","Type alias for the `BlockNumber` associated type of system config."],["BlockNumberOf",""],["DispatchResult","Unaugmented version of `DispatchResultWithPostInfo` that can be returned from dispatchable functions and is automatically converted to the augmented type. Should be used whenever the `PostDispatchInfo` does not need to be overwritten. As this should be the common case it is the implicit return type when none is specified."],["DispatchResultWithPostInfo","The return type of a `Dispatchable` in frame. When returned explicitly from a dispatchable function it allows overriding the default `PostDispatchInfo` returned from a dispatch."],["InherentIdentifier","An identifier for an inherent."],["OriginFor","Type alias for the `Origin` associated type of system config."],["StorageIndex",""],["TransactionLongevity","Minimum number of blocks a transaction will remain valid for. `TransactionLongevity::max_value()` means “forever”."],["TransactionPriority","Priority for a transaction. Additive. Higher is better."],["TransactionTag","Tag for a transaction. No two transactions with the same tag should be placed on-chain."],["TransactionValidity","Information on a transaction’s validity and, if valid, on how it relates to other transactions."],["Weight","Numeric range of a transaction weight."]]};